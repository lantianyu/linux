#################################################################################
#                           Onebranch Retail Pipeline                           #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  LinuxContainerImage: 'ubuntu:20.04' # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  DEBIAN_FRONTEND: noninteractive

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.NonOfficial.CrossPlat.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    featureFlags:
      sources_analysis_git_lcow: true
      WindowsHostVersion: '1ESWindows'
    git:
      fetchDepth: 1
      submodules: false
    globalSdl: # https://aka.ms/obpipelines/sdl
      # tsa:
      #  enabled: true # SDL results of non-official builds aren't uploaded to TSA by default.
      policheck:
        enabled: false
      credscan:
        enabled: false

    stages:
    - stage: linux_stage
      jobs:
      - job: linux_dom0_hyperv
        pool:
          type: linux

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: '$(Build.SourcesDirectory)/out' # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
          ob_git_submodules: true

        steps: # These steps will be run in unrestricted container's network
          - task: onebranch.pipeline.version@1
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'RevisionCounter'
              major: '1'
              minor: '0'
              exclude_commit: true

          - task: Bash@3
            displayName: 'Restore'
            inputs:
              filePath: '$(Build.SourcesDirectory)/Microsoft/install-deps.sh'
          
          - task: Bash@3
            displayName: 'Build perf'
            inputs:
              filePath: '$(Build.SourcesDirectory)/Microsoft/build-hcl-perf.sh'

          - task: Bash@3
            displayName: 'Build kernel'
            inputs:
              filePath: '$(Build.SourcesDirectory)/Microsoft/build-hcl-kernel.sh'

          - task: Bash@3
            displayName: 'Generate Nuspec'
            inputs:
              filePath: '$(Build.SourcesDirectory)/Microsoft/generate-nuspec.sh'

          - task: NuGetCommand@2
            displayName: 'NuGet Pack'
            inputs:
              command: 'pack'
              packagesToPack: '$(Build.SourcesDirectory)/hcl.nuspec'
              packDestination: '$(System.ArtifactsDirectory)'
              verbosityPack: 'Detailed'

          - task: NuGetCommand@2
            displayName: 'NuGet Push'
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              command: 'push'
              nuGetFeedType: 'internal'
              verbosityPush: 'Detailed'
              packagesToPush: '$(System.ArtifactsDirectory)/**/*.nupkg;!$(System.ArtifactsDirectory)/**/*.tar.gz'
              publishVstsFeed: 'Dev'
              allowPackageConflicts: true          

          #- task: Bash@3
          #  displayName: 'Copy Extra Files'
          #  inputs:
          #    targetType: 'inline'
          #    script: |
          #      mkdir -p $(Build.SourcesDirectory)/out
          #      cp -a $(Build.SourcesDirectory)/linux_deploy $(Build.SourcesDirectory)/out
          #      cp $(Build.SourcesDirectory)/*.tgz $(Build.SourcesDirectory)/out
          #      cp $(Build.SourcesDirectory)/*.tgz.sha256 $(Build.SourcesDirectory)/out
