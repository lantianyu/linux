#!/usr/bin/env python3

import os
import sys
import threading
import time
import subprocess
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))  # noqa E402

from lsgtools import log

log.set_verbosity(log.DEBUG)

base = "1bf4cc356030"

threads_max = int(len(os.sched_getaffinity(0))*1.3)

dom0_revs = list()
threads = list()
threads_joinable = []
lock = threading.Lock()
sem = threading.Semaphore(threads_max)


def thread_func(idx, it, lock):
    global dom0_revs, threads, threads_joinable
    log.debug("Thread {}: start".format(idx))

    # TODO This is th place to check if a hash is to be kept unconditionally.
    # If some list with the revisions to be carried over exists, check here
    # if the particular revision is good.

    t0 = time.clock_gettime(time.CLOCK_MONOTONIC)

    # Include the revision hash in the list
    if not rev_is_ignored(it["rev"]):
        cmd = ["git", "name-rev", "--name-only", "--no-undefined", "--refs", "rolling-lts/mariner-2/*", it["rev"]]
        log.info("Thread {}: {}".format(idx, " ".join(cmd)))

        res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, )
        if 0 != res.returncode:
            it["idx"] = idx
            dom0_revs.append(it)

    t1 = time.clock_gettime(time.CLOCK_MONOTONIC)
    log.debug("Thread {}: took {}s".format(idx, t1 - t0))

    lock.acquire()
    threads_joinable.append(idx)
    lock.release()

    log.debug("Thread {}: stop".format(idx))


def rev_get_file_list(rev):
    cmd = ["git", "show", "--name-only", "--pretty=format:", rev]
    log.info("Thread {}: {}".format(idx, " ".join(cmd)))
    res = subprocess.run(cmd, stdout=subprocess.PIPE)
    return res.stdout.decode("utf-8").strip(" \n").splitlines()


def rev_is_ignored(rev):
    files = rev_get_file_list(rev)

    # Exclude pipeline and ADO stuff
    for f in files:
        if f.find("pipelines/") == 0 or f.find(".azuredevops") == 0:
            return True

    # Exclude usual set version business
    found = 0
    set_version_files = ["Makefile", "arch/arm64/configs/mshv_defconfig", "arch/x86/configs/mshv_defconfig"]
    for f in files:
        if f in set_version_files:
            found = found + 1
    # It could be, that Makefile has to be changed, or alike.
    # In then case, better not to ignore the whole rev.
    if found == len(set_version_files):
        return True

    # Exclude defconfig fixes
    found = 0
    conf_files = ["arch/arm64/configs/mshv_defconfig", "arch/x86/configs/mshv_defconfig"]
    for f in files:
        if f in conf_files:
            found = found + 1
    # Commit only contains mshv_defconf fixes
    if found == len(files):
        return True

    return False


def threads_join():
    global threads, threads_joinable, sem
    for idx in threads_joinable.copy():
        threads[idx]["thr"].join()
        log.debug("Main     : joined thread {:d}".format(idx))
        threads_joinable.remove(idx)
        sem.release()


revs = list()
cmd = ["git", "log", "--oneline", "--no-merges", "{}..HEAD".format(base)]
log.info("Main     : {}".format(" ".join(cmd)))
res = subprocess.run(cmd, stdout=subprocess.PIPE)
out = res.stdout.decode("utf-8").strip(" \n").splitlines()
for line in out:
    try:
        rev = line.split(" ")[0]
        msg = " ".join(line.split(" ")[1:])
    except:  # noqa E722
        continue
    revs.append({"idx": -1, "rev": rev, "msg": msg})
revs_len = len(revs)
log.info("Main     : got {:d} revisions to check".format(revs_len))


idx = 0
while idx < revs_len:
    while sem.acquire(blocking=False) and idx < revs_len:
        log.debug("Main     : create and start thread {:d}.".format(idx))
        thr = threading.Thread(target=thread_func, args=(idx, revs[idx], lock, ))
        thr.start()
        t = {"thr": thr}

        lock.acquire()
        threads.append(t)
        lock.release()

        idx = idx + 1

    lock.acquire()
    threads_join()
    lock.release()

threads_join()

dom0_revs.sort(key=lambda v: v.get("idx"))
with open("dom0-rev-list.txt", "w") as f:
    for it in dom0_revs:
        ln = "{} {}\n".format(it["rev"], it["msg"])
        f.write(ln)
f.close()
