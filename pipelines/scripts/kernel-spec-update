#!/usr/bin/env python3

__copyright__ = "Copyright (c) Microsoft Corporation."

import os
import sys
import requests
import json
import re
import hashlib
import subprocess
import tarfile
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))  # noqa E402

from lsgtools import log
from lsgtools import cli
from lsgtools.virt import conf
from lsgtools.virt.mshv import kernel

arg_parser = cli.create_arg_parser(prog="kernel-spec-update",
                                   description="Update SPEC file in lsg-linux-mariner derivative repo")
# Ref might look like refs/tags/msft/mshv-rolling/5.15.74.mshv3.
arg_parser.add_argument("tag", action="store", help="Tag name")
arg_parser.add_argument("rev", action="store", help="Git revision hash")
args = arg_parser.parse_args()
log.set_verbosity(args.verbose)

version = kernel.get_version_from_tag(args.tag)
# TODO if possible, verify the passed  kernel commit hash
# TODO for this to work locally need to retrieve the hash if not passed
rev_hash = args.rev[:8]
if len(rev_hash) < 8:
    log.err("Git revision '{}' is invalid".format(rev_hash))
    exit(1)

derivative_branch = "autoupdate/kernel-mshv-{}".format(version)
storage_url = os.getenv("SOURCES_STORAGE_URL")
if storage_url is None:
    storage_url = conf.default_storage_url

tarball_name = kernel.build_tgz_name(version)
tarball_local_path = "/tmp/{}".format(tarball_name)
tarball_url = "{}/{}".format(storage_url, tarball_name)
tarball_sum_url = "{}/{}.sha256".format(storage_url, tarball_name)

try:
    # This simultaneously also serves as a download test for the tarball
    resp = requests.get(tarball_url)
    if not 200 == resp.status_code:
        raise Exception(resp.content)
    with open(tarball_local_path, 'wb') as f:
        f.write(resp.content)
    f.close()
except Exception as e:
    log.fatal("Couldn't retvieve tarball '{}'.\nException: {}".format(tarball_url, e))
    exit(1)

try:
    resp = requests.get(tarball_sum_url)
    tarball_sha256 = resp.content.strip().decode()
    if not 200 == resp.status_code:
        raise Exception(tarball_sha256)
except Exception as e:
    log.fatal("Couldn't retvieve the SHA256 sum file '{}'.\nException: {}").format(tarball_sum_url, e)
    exit(1)

cmd = ["git", "checkout", "-b", derivative_branch]
res = subprocess.run(cmd)
if 0 != res.returncode:
    err = res.stderr.decode("ascii")
    raise Exception(err)


kernel_spec_path = "SPECS/kernel/kernel-mshv.spec"
kernel_sums_path = "SPECS/kernel/kernel-mshv.signatures.json"
kernel_conf = {
        "x86": {"path": "SPECS/kernel/config_x86", "sha256": None, "kernel_arch": "x86"},
        "aarch64": {"path": "SPECS/kernel/config_aarch64", "sha256": None, "kernel_arch": "arm64"}
        }

# Patch config
for k in kernel_conf:
    cf = kernel_conf[k]["path"]

    # Extract configs from the tarball into the SPEC
    config_path_in_tar = "arch/{}/configs/mshv_defconfig".format(kernel_conf[k]["kernel_arch"])
    conf = None
    with tarfile.open(tarball_local_path, "r") as tar:
        # Expect just one root member in the tarball which is a dir
        for ti in tar:
            if ti.isdir():
                config_path_in_tar = "{}/{}".format(ti.name, config_path_in_tar)
                log.info("Reading '{}' from '{}'".format(config_path_in_tar, tarball_local_path))
                conf = tar.extractfile(config_path_in_tar).read().decode("utf-8")
                break
    tar.close()
    if not bool(conf):
        raise Exception("Read empty config from '{}' in '{}".format(config_path_in_tar, tarball_local_path))

    # TODO Introduce an array with pattern/replacement and pack it into the module
    conf = re.sub(re.compile("CONFIG_SYSTEM_TRUSTED_KEYS=.*"), 'CONFIG_SYSTEM_TRUSTED_KEYS="certs/mariner.pem"', conf)
    conf = re.sub(re.compile("Linux/(.*) (.*) Kernel Configuration"), "Linux/\\1 {} Kernel Configuration".format(version),
                  conf)

    with open(cf, "w") as f:
        f.write(conf)
    f.close()

    kernel_conf[k]["sha256"] = hashlib.sha256(conf.encode()).hexdigest()

# Recalculate sum
pem_path = "SPECS/kernel/cbl-mariner-ca-20211013.pem"
with open(pem_path, "rb") as f:
    pem_sha256 = hashlib.sha256(f.read()).hexdigest()
f.close()

# Re-create signatures file
sigs_struct = {
    "Signatures": {
        os.path.basename(pem_path): pem_sha256,
        os.path.basename(kernel_conf["x86"]["path"]): kernel_conf["x86"]["sha256"],
        os.path.basename(kernel_conf["aarch64"]["path"]): kernel_conf["aarch64"]["sha256"],
        tarball_name: tarball_sha256,
            }
    }
with open(kernel_sums_path, "w") as f:
    json.dump(sigs_struct, f, indent=2)
f.close()

# Update spec
with open(kernel_spec_path, "r") as f:
    kernel_spec = f.read()
f.close()
kernel_spec = re.sub(re.compile("%global pkgrel.*"), "%global pkgrel 1000", kernel_spec)
kernel_spec = re.sub(re.compile("%global kernelver.*"), "%global kernelver {}".format(version), kernel_spec)
kernel_spec = re.sub(re.compile("%global gitrev.*"), "%global gitrev {}".format(rev_hash), kernel_spec)
with open(kernel_spec_path, "w") as f:
    f.write(kernel_spec)
f.close()


# Commit the branch
commit_msg = """kernel-msft: Autoupdate to {}

Kernel revision: {}
""".format(version, rev_hash)
cmd = ["git", "commit", "-a", "-m", commit_msg]
res = subprocess.run(cmd)
if 0 != res.returncode:
    err = res.stderr.decode("ascii")
    raise Exception(err)
